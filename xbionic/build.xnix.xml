<?xml version="1.0" encoding="UTF-8"?>

<!--
 * Copyright 2013 Cheolmin Jo (webos21@gmail.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->

<project name="xi.xbionic.libc" default="all" basedir="..">

	<!-- ====================          PREPARE           ================== -->

	<!-- PREPARE : Check Environment -->
	<target name="_prepare.prop" unless="ant_cfg_issetTarget">
		<echo>Warning : you are here without proper command!!!!</echo>
		<property environment="env" />
		<property file="${basedir}/buildx/antmk/project.mk" />
		<property file="${basedir}/buildx/antmk/java.mk" />
		<property file="${basedir}/buildx/antmk/build_${project_def_target}.mk" />
		<property name="ant_cfg_target" value="${project_def_target}" />
		<property name="ant_cfg_issetTarget" value="true" />
	</target>

	<!-- PREPARE : Make Directories -->
	<target name="_prepare.mkdir" depends="_prepare.prop">
		<!-- Base -->
		<dirname property="current_dir_abs" file="${ant.file}" />
		<basename property="current_dir_rel" file="${current_dir_abs}" />

		<!-- Target -->
		<property name="module_dir_target" value="${basedir}/ant/${build_cfg_target}/${current_dir_rel}" />
		<property name="module_dir_obja" value="${module_dir_target}/static" />
		<property name="module_dir_a_ssp" value="${module_dir_obja}/libbionic_ssp" />
		<property name="module_dir_a_freebsd" value="${module_dir_obja}/libc_freebsd" />
		<property name="module_dir_a_netbsd" value="${module_dir_obja}/libc_netbsd" />
		<property name="module_dir_a_bionic" value="${module_dir_obja}/libc_bionic" />
		<property name="module_dir_a_ccmn" value="${module_dir_obja}/libc_common" />
		<property name="module_dir_a_ccmn_arch" value="${module_dir_a_ccmn}/arch" />
		<property name="module_dir_a_ccmn_unistd" value="${module_dir_a_ccmn}/unistd" />
		<property name="module_dir_a_ccmn_stdio" value="${module_dir_a_ccmn}/stdio" />
		<property name="module_dir_a_ccmn_stdlib" value="${module_dir_a_ccmn}/stdlib" />
		<property name="module_dir_a_ccmn_string" value="${module_dir_a_ccmn}/string" />
		<property name="module_dir_a_ccmn_wchar" value="${module_dir_a_ccmn}/wchar" />
		<property name="module_dir_a_ccmn_tzcode" value="${module_dir_a_ccmn}/tzcode" />
		<property name="module_dir_a_ccmn_bionic" value="${module_dir_a_ccmn}/bionic" />
		<property name="module_dir_a_ccmn_netbsd" value="${module_dir_a_ccmn}/netbsd" />
		<property name="module_dir_a_nomalloc" value="${module_dir_obja}/libc_nomalloc" />
		<property name="module_dir_objso" value="${module_dir_target}/shared" />
		<property name="module_dir_so_ca" value="${module_dir_objso}/libc" />
		<property name="module_dir_so_ca_crt" value="${module_dir_so_ca}/crt" />
		<property name="module_dir_so_ca_arch" value="${module_dir_so_ca}/arch" />
		<property name="module_dir_so_ca_bionic" value="${module_dir_so_ca}/bionic" />
		<mkdir dir="${module_dir_target}" />
		<mkdir dir="${module_dir_obja}" />
		<mkdir dir="${module_dir_a_ssp}" />
		<mkdir dir="${module_dir_a_freebsd}" />
		<mkdir dir="${module_dir_a_netbsd}" />
		<mkdir dir="${module_dir_a_bionic}" />
		<mkdir dir="${module_dir_a_ccmn}" />
		<mkdir dir="${module_dir_a_ccmn_arch}" />
		<mkdir dir="${module_dir_a_ccmn_unistd}" />
		<mkdir dir="${module_dir_a_ccmn_stdio}" />
		<mkdir dir="${module_dir_a_ccmn_stdlib}" />
		<mkdir dir="${module_dir_a_ccmn_string}" />
		<mkdir dir="${module_dir_a_ccmn_wchar}" />
		<mkdir dir="${module_dir_a_ccmn_tzcode}" />
		<mkdir dir="${module_dir_a_ccmn_bionic}" />
		<mkdir dir="${module_dir_a_ccmn_netbsd}" />
		<mkdir dir="${module_dir_a_nomalloc}" />
		<mkdir dir="${module_dir_objso}" />
		<mkdir dir="${module_dir_so_ca}" />
		<mkdir dir="${module_dir_so_ca_crt}" />
		<mkdir dir="${module_dir_so_ca_arch}" />
		<mkdir dir="${module_dir_so_ca_bionic}" />

		<!-- Output -->
		<property name="module_dir_output_base" value="${basedir}/ant/${build_cfg_target}/emul" />
		<property name="module_dir_output_bin" value="${module_dir_output_base}/bin" />
		<property name="module_dir_output_inc" value="${module_dir_output_base}/include" />
		<property name="module_dir_output_lib" value="${module_dir_output_base}/lib" />
		<property name="module_dir_output_res" value="${module_dir_output_base}/res" />
		<property name="module_dir_output_test" value="${module_dir_output_base}/test" />
		<mkdir dir="${module_dir_output_base}" />
		<mkdir dir="${module_dir_output_bin}" />
		<mkdir dir="${module_dir_output_inc}" />
		<mkdir dir="${module_dir_output_lib}" />
		<mkdir dir="${module_dir_output_res}" />
		<mkdir dir="${module_dir_output_test}" />

		<!-- Options -->
		<property name="build_xbionic_opt_c" value="${build_xbionic_opt_c}" />
		<property name="build_xbionic_opt_cxx" value="${build_xbionic_opt_cxx}" />
		<property name="build_xbionic_opt_ld" value="${build_xbionic_opt_ld}" />
		<property name="build_xb_libc_cflags" value="${build_xb_libc_cflags}" />
		<property name="build_xb_libc_ldflags" value="${build_xb_libc_ldflags}" />
		<property name="module_build_target_a" value="${build_opt_a_pre}c.${build_opt_a_ext}" />
		<property name="module_build_target_so" value="${build_opt_so_pre}c.${build_opt_so_ext}" />
	</target>

	<!-- PREPARE : Display prepared values  -->
	<target name="_prepare.result" depends="_prepare.mkdir">
		<echo>================================================================</echo>
		<echo>ant.file                : ${ant.file}</echo>
		<echo>----------------------------------------------------------------</echo>
		<echo>current_dir_abs         : ${current_dir_abs}</echo>
		<echo>current_dir_rel         : ${current_dir_rel}</echo>
		<echo>----------------------------------------------------------------</echo>
		<echo>module_dir_target       : ${module_dir_target}</echo>
		<echo>module_dir_obja         : ${module_dir_obja}</echo>
		<echo>module_dir_a_ssp        : ${module_dir_a_ssp}</echo>
		<echo>module_dir_a_freebsd    : ${module_dir_a_freebsd}</echo>
		<echo>module_dir_a_netbsd     : ${module_dir_a_netbsd}</echo>
		<echo>module_dir_a_bionic     : ${module_dir_a_bionic}</echo>
		<echo>module_dir_a_ccmn       : ${module_dir_a_ccmn}</echo>
		<echo>module_dir_a_ccmn_arch  : ${module_dir_a_ccmn_arch}</echo>
		<echo>module_dir_a_ccmn_unistd: ${module_dir_a_ccmn_unistd}</echo>
		<echo>module_dir_a_ccmn_stdio : ${module_dir_a_ccmn_stdio}</echo>
		<echo>module_dir_a_ccmn_stdlib: ${module_dir_a_ccmn_stdlib}</echo>
		<echo>module_dir_a_ccmn_string: ${module_dir_a_ccmn_string}</echo>
		<echo>module_dir_a_ccmn_wchar : ${module_dir_a_ccmn_wchar}</echo>
		<echo>module_dir_a_ccmn_tzcode: ${module_dir_a_ccmn_tzcode}</echo>
		<echo>module_dir_a_ccmn_bionic: ${module_dir_a_ccmn_bionic}</echo>
		<echo>module_dir_a_ccmn_netbsd: ${module_dir_a_ccmn_netbsd}</echo>
		<echo>module_dir_a_nomalloc   : ${module_dir_a_nomalloc}</echo>
		<echo>module_dir_objso        : ${module_dir_objso}</echo>
		<echo>module_dir_so_ca        : ${module_dir_so_ca}</echo>
		<echo>module_dir_so_ca_crt    : ${module_dir_so_ca_crt}</echo>
		<echo>module_dir_so_ca_arch   : ${module_dir_so_ca_arch}</echo>
		<echo>module_dir_so_ca_bionic : ${module_dir_so_ca_bionic}</echo>
		<echo>----------------------------------------------------------------</echo>
		<echo>module_dir_output_base  : ${module_dir_output_base}</echo>
		<echo>module_dir_output_bin   : ${module_dir_output_bin}</echo>
		<echo>module_dir_output_inc   : ${module_dir_output_inc}</echo>
		<echo>module_dir_output_lib   : ${module_dir_output_lib}</echo>
		<echo>module_dir_output_res   : ${module_dir_output_res}</echo>
		<echo>module_dir_output_test  : ${module_dir_output_test}</echo>
		<echo>----------------------------------------------------------------</echo>
		<echo>build_xbionic_opt_c     : ${build_xbionic_opt_c}</echo>
		<echo>build_xbionic_opt_cxx   : ${build_xbionic_opt_cxx}</echo>
		<echo>build_xbionic_opt_ld    : ${build_xbionic_opt_ld}</echo>
		<echo>----------------------------------------------------------------</echo>
		<echo>build_xb_libc_cflags    : ${build_xb_libc_cflags}</echo>
		<echo>build_xb_libc_ldflags   : ${build_xb_libc_ldflags}</echo>
		<echo>----------------------------------------------------------------</echo>
		<echo>module_build_target_a   : ${module_build_target_a}</echo>
		<echo>module_build_target_so  : ${module_build_target_so}</echo>
		<echo>================================================================</echo>
	</target>

	<target name="_prepare" depends="_prepare.result" />

	<!-- ====================            BUILD           ================== -->

	<!-- BUILD : bionic-crt  -->
	<target name="_build.xbionic.libc.crt" depends="_prepare">
		<echo>Build : xbionic-libc-crt</echo>
		<apply verbose="true" executable="${build_tool_cc}" dest="${module_dir_so_ca_crt}" failonerror="true">
			<arg line="${build_xbionic_opt_c}" />
			<arg line="${build_opt_fPIC}" />
			<arg line="${build_xb_libc_src_crt_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_crt_in}" excludes="${build_xb_libc_src_crt_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
                <mapper type="regexp" from="^(.*)\.[c|S]" to="\1.o" />
			</chainedmapper>
		</apply>
		<echo>Build : xbionic-libc-crt-mix</echo>
		<copy tofile="${module_dir_so_ca_crt}/crtbegin_static1.o" file="${module_dir_so_ca_crt}/crtbegin.o"/>
		<apply verbose="true" executable="${build_tool_cc}" failonerror="true" parallel="true">
			<arg line="${build_xbionic_opt_ld}" />
			<arg line="${build_xb_libc_src_crt_lf}" />
			<arg line="-r" />
			<arg line="-o" />
			<arg file="${module_dir_so_ca_crt}/crtbegin_static.o" />
			<srcfile />
			<fileset dir="${module_dir_so_ca_crt}" includes="crtbegin_static1.o, crtbrand.o" />
		</apply>
		<copy tofile="${module_dir_so_ca_crt}/crtbegin_dynamic1.o" file="${module_dir_so_ca_crt}/crtbegin.o"/>
		<apply verbose="true" executable="${build_tool_cc}" failonerror="true" parallel="true">
			<arg line="${build_xbionic_opt_ld}" />
			<arg line="${build_xb_libc_src_crt_lf}" />
			<arg line="-r" />
			<arg line="-o" />
			<arg file="${module_dir_so_ca_crt}/crtbegin_dynamic.o" />
			<srcfile />
			<fileset dir="${module_dir_so_ca_crt}" includes="crtbegin_dynamic1.o, crtbrand.o" />
		</apply>
	</target>

	<!-- BUILD : bionic-static  -->
	<target name="_build.xbionic.libc.static" depends="_prepare">
		<echo>Build : xbionic-libc-ssp</echo>
		<apply verbose="true" executable="${build_tool_cxx}" dest="${module_dir_a_ssp}" failonerror="true">
			<arg line="${build_xbionic_opt_cxx}" />
			<arg line="${build_xb_libc_src_ssp_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_ssp_in}" excludes="${build_xb_libc_src_ssp_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
                <mapper type="glob" from="*.cpp" to="*.o" />
			</chainedmapper>
		</apply>
		<apply verbose="true" executable="${build_tool_ar}" failonerror="true" parallel="true">
			<arg line="rcu" />
			<arg file="${module_dir_obja}/${build_xb_libc_src_sspbin}" />
			<srcfile />
			<fileset dir="${module_dir_a_ssp}" includes="*.o" />
		</apply>
		<exec executable="${build_tool_ranlib}" failonerror="true">
			<arg file="${module_dir_obja}/${build_xb_libc_src_sspbin}" />
		</exec>
		
		<echo>Build : xbionic-libc-upstream-freebsd</echo>
		<apply verbose="true" executable="${build_tool_cc}" dest="${module_dir_a_freebsd}" failonerror="true">
			<arg line="${build_xbionic_opt_c}" />
			<arg line="${build_xb_libc_src_ufb_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_ufb_in}" excludes="${build_xb_libc_src_ufb_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="glob" from="*.c" to="*.o" />
			</chainedmapper>
		</apply>
		<apply verbose="true" executable="${build_tool_ar}" failonerror="true" parallel="true">
			<arg line="rcu" />
			<arg file="${module_dir_obja}/${build_xb_libc_src_ufbbin}" />
			<srcfile />
			<fileset dir="${module_dir_a_freebsd}" includes="*.o" />
		</apply>
		<exec executable="${build_tool_ranlib}" failonerror="true">
			<arg file="${module_dir_obja}/${build_xb_libc_src_ufbbin}" />
		</exec>

		<echo>Build : xbionic-libc-upstream-netbsd</echo>
		<apply verbose="true" executable="${build_tool_cc}" dest="${module_dir_a_netbsd}" failonerror="true">
			<arg line="${build_xbionic_opt_c}" />
			<arg line="${build_xb_libc_src_unb_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_unb_in}" excludes="${build_xb_libc_src_unb_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="glob" from="*.c" to="*.o" />
			</chainedmapper>
		</apply>
		<apply verbose="true" executable="${build_tool_ar}" failonerror="true" parallel="true">
			<arg line="rcu" />
			<arg file="${module_dir_obja}/${build_xb_libc_src_unbbin}" />
			<srcfile />
			<fileset dir="${module_dir_a_netbsd}" includes="*.o" />
		</apply>
		<exec executable="${build_tool_ranlib}" failonerror="true">
			<arg file="${module_dir_obja}/${build_xb_libc_src_unbbin}" />
		</exec>

		<echo>Build : xbionic-libc-bionic-cpp</echo>
		<apply verbose="true" executable="${build_tool_cxx}" dest="${module_dir_a_bionic}" failonerror="true">
			<arg line="${build_xbionic_opt_cxx}" />
			<arg line="${build_xb_libc_src_bi2_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_bi2_in}" excludes="${build_xb_libc_src_bi2_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="glob" from="*.cpp" to="*.o" />
			</chainedmapper>
		</apply>
		<apply verbose="true" executable="${build_tool_ar}" failonerror="true" parallel="true">
			<arg line="rcu" />
			<arg file="${module_dir_obja}/${build_xb_libc_src_bi2bin}" />
			<srcfile />
			<fileset dir="${module_dir_a_bionic}" includes="*.o" />
		</apply>
		<exec executable="${build_tool_ranlib}" failonerror="true">
			<arg file="${module_dir_obja}/${build_xb_libc_src_bi2bin}" />
		</exec>

		<echo>Build : xbionic-libc-common</echo>
		<echo>Build : xbionic-libc-common-arch</echo>
		<apply verbose="true" executable="${build_tool_cc}" dest="${module_dir_a_ccmn_arch}" failonerror="true">
			<arg line="${build_xbionic_opt_c}" />
			<arg line="${build_xb_libc_src_sys_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_syc_in}" excludes="${build_xb_libc_src_syc_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
                <mapper type="regexp" from="^(.*)\.[c|S]" to="\1.o" />
			</chainedmapper>
		</apply>
		<echo>Build : xbionic-libc-common-unistd</echo>
		<apply verbose="true" executable="${build_tool_cc}" dest="${module_dir_a_ccmn_unistd}" failonerror="true">
			<arg line="${build_xbionic_opt_c}" />
			<arg line="${build_xb_libc_src_uni_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_uni_in}" excludes="${build_xb_libc_src_uni_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="glob" from="*.c" to="*.o" />
			</chainedmapper>
		</apply>
		<echo>Build : xbionic-libc-common-stdio</echo>
		<apply verbose="true" executable="${build_tool_cc}" dest="${module_dir_a_ccmn_stdio}" failonerror="true">
			<arg line="${build_xbionic_opt_c}" />
			<arg line="${build_xb_libc_src_sio_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_sio_in}" excludes="${build_xb_libc_src_sio_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="glob" from="*.c" to="*.o" />
			</chainedmapper>
		</apply>
		<echo>Build : xbionic-libc-common-stdlib</echo>
		<apply verbose="true" executable="${build_tool_cc}" dest="${module_dir_a_ccmn_stdlib}" failonerror="true">
			<arg line="${build_xbionic_opt_c}" />
			<arg line="${build_xb_libc_src_slb_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_slb_in}" excludes="${build_xb_libc_src_slb_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="glob" from="*.c" to="*.o" />
			</chainedmapper>
		</apply>
		<echo>Build : xbionic-libc-common-string</echo>
		<apply verbose="true" executable="${build_tool_cc}" dest="${module_dir_a_ccmn_string}" failonerror="true">
			<arg line="${build_xbionic_opt_c}" />
			<arg line="${build_xb_libc_src_str_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_str_in}" excludes="${build_xb_libc_src_str_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="glob" from="*.c" to="*.o" />
			</chainedmapper>
		</apply>
		<echo>Build : xbionic-libc-common-wchar</echo>
		<apply verbose="true" executable="${build_tool_cc}" dest="${module_dir_a_ccmn_wchar}" failonerror="true">
			<arg line="${build_xbionic_opt_c}" />
			<arg line="${build_xb_libc_src_wch_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_wch_in}" excludes="${build_xb_libc_src_wch_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="glob" from="*.c" to="*.o" />
			</chainedmapper>
		</apply>
		<echo>Build : xbionic-libc-common-tzcode</echo>
		<apply verbose="true" executable="${build_tool_cc}" dest="${module_dir_a_ccmn_tzcode}" failonerror="true">
			<arg line="${build_xbionic_opt_c}" />
			<arg line="${build_xb_libc_src_tzc_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_tzc_in}" excludes="${build_xb_libc_src_tzc_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="glob" from="*.c" to="*.o" />
			</chainedmapper>
		</apply>
		<echo>Build : xbionic-libc-common-bionic</echo>
		<apply verbose="true" executable="${build_tool_cc}" dest="${module_dir_a_ccmn_bionic}" failonerror="true">
			<arg line="${build_xbionic_opt_c}" />
			<arg line="${build_xb_libc_src_bon_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_bon_in}" excludes="${build_xb_libc_src_bon_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="glob" from="*.c" to="*.o" />
			</chainedmapper>
		</apply>
		<echo>Build : xbionic-libc-common-netbsd</echo>
		<apply verbose="true" executable="${build_tool_cc}" dest="${module_dir_a_ccmn_netbsd}" failonerror="true">
			<arg line="${build_xbionic_opt_c}" />
			<arg line="${build_xb_libc_src_nbd_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_nbd_in}" excludes="${build_xb_libc_src_nbd_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="glob" from="*.c" to="*.o" />
			</chainedmapper>
		</apply>
		<echo>Build : xbionic-libc-common-a</echo>
		<apply verbose="true" executable="${build_tool_ar}" failonerror="true" parallel="true">
			<arg line="rcu" />
			<arg file="${module_dir_obja}/${build_xb_libc_src_combin}" />
			<srcfile />
			<fileset dir="${module_dir_obja}" includes="libbionic_ssp/*.o, libc_*/**/*.o" />
		</apply>
		<exec executable="${build_tool_ranlib}" failonerror="true">
			<arg file="${module_dir_obja}/${build_xb_libc_src_combin}" />
		</exec>

		<echo>Build : xbionic-libc-nomalloc-a</echo>
		<apply verbose="true" executable="${build_tool_cc}" dest="${module_dir_a_nomalloc}" failonerror="true">
			<arg line="${build_xbionic_opt_c}" />
			<arg line="${build_xb_libc_src_nom_cf}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}" includes="${build_xb_libc_src_nom_in}" excludes="${build_xb_libc_src_nom_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
                <mapper type="regexp" from="^(.*)\.[c|cpp]" to="\1.o" />
			</chainedmapper>
		</apply>
		<apply verbose="true" executable="${build_tool_ar}" failonerror="true" parallel="true">
			<arg line="rcu" />
			<arg file="${module_dir_obja}/${build_xb_libc_src_nombin}" />
			<srcfile />
			<fileset dir="${module_dir_obja}" includes="libbionic_ssp/*.o, libc_*/**/*.o" />
		</apply>
		<exec executable="${build_tool_ranlib}" failonerror="true">
			<arg file="${module_dir_obja}/${build_xb_libc_src_nombin}" />
		</exec>

	</target>
	<target name="_build.xbionic.libc.lo" depends="_prepare">
		<apply verbose="true" executable="${build_tool_cc}" dest="${module_dir_object}" failonerror="true">
			<arg line="${build_opt_c}" />
			<arg line="${build_opt_fPIC}" />
			<arg line="${module_build_cflags}" />
			<arg line="-c" />
			<arg line="-o" />
			<targetfile />
			<srcfile />
			<fileset dir="${current_dir_abs}/src" includes="${module_build_src_in}" excludes="${module_build_src_ex}" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="glob" from="*.c" to="*.lo" />
			</chainedmapper>
		</apply>
	</target>
	<target name="_build.xbionic.libc.so" depends="_build.xbionic.libc.lo">
		<apply verbose="true" executable="${build_tool_linker}" failonerror="true" parallel="true">
			<arg line="${build_opt_ld}" />
			<arg line="${build_opt_ld_so}${module_build_target_so}" />
			<arg line="-o" />
			<arg file="${module_dir_target}/${module_build_target_so}" />
			<srcfile />
			<arg line="${module_build_ldflags}" />
			<arg line="${build_opt_ld_mgwcx}" />
			<fileset dir="${module_dir_object}" includes="*.lo" />
		</apply>
	</target>
	<target name="_build.xbionic.libc" depends="_build.xbionic.libc.crt, _build.xbionic.libc.static" />
	<!--
	<target name="_build.xbionic.libc" depends="_build.xbionic.libc.a, _build.xbionic.libc.so" />
	-->

	<target name="_build.output" depends="_build.xbionic.libc">
		<copy todir="${module_dir_output_inc}">
			<fileset dir="${current_dir_abs}/include" includes="**/**.h" />
		</copy>
		<copy todir="${module_dir_output_lib}">
			<fileset dir="${module_dir_target}" includes="${module_build_target_a}, ${module_build_target_so}" />
		</copy>
	</target>

	<!-- ====================           ENTRY            ================== -->

	<!-- All -->
	<target name="all" depends="_prepare, _build.xbionic.libc" />
	<!--
	<target name="all" depends="_prepare, _build.output" />
	-->

	<!-- CLEAN -->
	<target name="clean" depends="_prepare">
		<delete dir="${module_dir_target}" />
	</target>

</project>
